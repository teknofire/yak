#!/usr/bin/env ruby
# encoding: utf-8
# Usage: yak ipcheck
# Summary: Check subnet for available ips using nmap

require 'clamp'
require 'mixlib/shellout'
require 'ipaddr'
require 'securerandom'
require 'faker'
require 'colorize'

class YakIpCheck < Clamp::Command
  option ['-s', '--sudo'], :flag, 'use sudo for nmap'
  option ['--debug'], :flag, 'enable debug output'

  option ['-d', '--dhcp'], "reserve_count", 'generate dhcpd conf to reserve [reserve_count] number of ips', attribute_name: :reserve_count do |s|
    Integer(s)
  end
  option ['--dhcp-start'], "start_ip", 'ip to start generating config from', default: '10.19.16.30'
  option ['--dhcp-host'], "HOSTNAME", 'hostname to use in dhcp conf output', default: 'x.gina.alaska.edu'
  option ['--vm'], :flag, 'generate hostname for virtual machine'
  parameter '[IPSPACE]', 'network to check', attribute_name: :ipspace, default: '10.19.16.0/24'

  def execute
    unless check_command('which nmap')
      raise "Unable to find nmap"
    end

    command = ""
    command << 'sudo ' if sudo?
    command << "nmap -n -sn #{ipspace} -oG - | awk '/Up$/{print $2}'"

    ips = %x{#{command}}.split("\n")

    addresses = IPAddr.new(ipspace).to_range()

    if !reserve_count.nil?
      output_dhcp_conf(addresses, ips, reserve_count)
    else
      output_available_ipspace(addresses, ips)
    end
  end

  def output_dhcp_conf(ipspace, foundips, reserve_count)
    output = []
    count = 0
    start_ip = IPAddr.new(dhcp_start)

    ipspace.each do |ip|
      next if ip < start_ip
      next if reserved?(ip)
      next if foundips.include?(ip.to_s)
      break if count >= reserve_count
      count += 1
      hostname = vm_hostname if vm?
      hostname ||= metal_hostname
      output << <<-EOB
host #{hostname}#{dhcp_host} {
  hardware ethernet #{Faker::Internet.mac_address('55:44:33')};
  fixed-address #{ip};
}
      EOB
    end

    puts output.join("\n")

    if output.count < reserve_count
      puts "ERROR: Unable to find enough free ips".colorize(:red)
    end

    puts "Created #{output.count} of #{reserve_count} entries".colorize(:green)
  end

  def vm_hostname
    "#{Faker::Team.creature.downcase}-#{SecureRandom.hex(2)}."
  end

  def metal_hostname
    "#{Faker::Team.creature.downcase}."
  end

  def output_available_ipspace(ipspace, foundips)

    ipspace.each do |ip|
      output = "#{ip} - "
      if reserved?(ip)
        output << "reserved:"
      end
      output << (foundips.include?(ip.to_s) ? 'taken' : 'free')

      puts output
    end
  end

  def run_command(command, opts = {})
    puts command if debug?
    cmd = Mixlib::ShellOut.new(command, { live_stream: STDOUT }.merge(opts))
    cmd.run_command
    cmd
  end

  def run_command!(cmd, opts = {})
    cmd = run_command(cmd, opts)
    cmd.error!

    cmd
  end

  def reserved?(ip)
    last = ip.to_s.split('.').last.to_i
    last < 20 || last == 255
  end

  def check_command(cmd)
    !run_command(cmd, { live_stream: false }).error?
  end
end

YakIpCheck.run
# Put the rest of the ipcheck command here
