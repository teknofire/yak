#!/usr/bin/env ruby
# encoding: utf-8
# Usage: yak ipcheck
# Summary: Check subnet for available ips using nmap

require 'clamp'
require 'mixlib/shellout'
require 'ipaddr'

class YakIpCheck < Clamp::Command
  option ['-s', '--sudo'], :flag, 'use sudo for nmap'
  option ['-d', '--debug'], :flag, 'enable debug output'
  parameter '[IPSPACE]', 'ipspace', attribute_name: :ipspace, default: '10.19.16.0/24'

  def execute
    unless check_command('which nmap')
      raise "Unable to find nmap"
    end

    command = ""
    command << 'sudo ' if sudo?
    command << "nmap -n -sn #{ipspace} -oG - | awk '/Up$/{print $2}'"

    ips = %x{#{command}}.split("\n")

    addresses = IPAddr.new(ipspace).to_range()
    addresses.each do |ip|
      puts "#{ip} - #{ips.include?(ip.to_s) ? 'taken' : 'free' }"
    end
  end

  def run_command(command, opts = {})
    puts command if debug?
    cmd = Mixlib::ShellOut.new(command, { live_stream: STDOUT }.merge(opts))
    cmd.run_command
    cmd
  end

  def run_command!(cmd, opts = {})
    cmd = run_command(cmd, opts)
    cmd.error!

    cmd
  end

  def check_command(cmd)
    !run_command(cmd, { live_stream: false }).error?
  end
end

YakIpCheck.run
# Put the rest of the ipcheck command here
